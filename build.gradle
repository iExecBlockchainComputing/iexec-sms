import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'io.freefair.lombok' version '5.3.0'
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'maven-publish'
}

ext {
    springCloudVersion = '2021.0.0'
    openFeignVersion = '11.7'
    gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

allprojects {
    group = 'com.iexec.sms'
    sourceCompatibility = 11
    targetCompatibility = 11
    if (gitBranch != 'main' && gitBranch != 'master' && !(gitBranch ==~ '(release|hotfix|support)/.*')) {
        version += '-NEXT-SNAPSHOT'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://docker-regis-adm.iex.ec/repository/maven-public/"
            credentials {
                username nexusUser
                password nexusPassword
            }
        }
        maven {
            url "https://nexus.intra.iex.ec/repository/maven-public/"
        }
        maven {
            url "https://jitpack.io"
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // iexec
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"
    implementation project(':iexec-sms-library')

    // spring
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // H2
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2:1.4.200'

    // Spring Doc
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.3'

    //ssl
    implementation 'org.apache.httpcomponents:httpclient:4.5.9'

    // Web3j issues, see core build.gradle
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50'

    // velocity for templating
    implementation 'org.apache.velocity:velocity-engine-core:2.0'

    // MongoDB
    //implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    //implementation 'org.springframework.boot:spring-boot-starter'
    //testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    // testImplementation 'org.mockito:mockito-inline:2.13.0' // activates mocking final classes/methods

    // test containers
    testImplementation 'org.testcontainers:junit-jupiter:1.16.0'
    testImplementation 'org.testcontainers:testcontainers:1.16.0'
    testImplementation 'org.testcontainers:mongodb:1.16.0'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            srcDir 'src/itest/java'
        }
        resources.srcDir 'src/itest/resources'
    }
}

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
}

task itest(type:Test) {
    group       'Verification'
    description 'Runs the integration tests.'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false } // run always
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.7"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
tasks.test.finalizedBy    tasks.jacocoTestReport
tasks.sonarqube.dependsOn tasks.jacocoTestReport

publishing {
    publications {
        maven(MavenPublication) {
            artifact bootJar
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username nexusUser
                password nexusPassword
            }
            url project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}

ext.jarPathForOCI  = relativePath(tasks.bootJar.outputs.files.singleFile)
ext.gitShortCommit = 'git rev-parse --short=8 HEAD'.execute().text.trim()
ext.ociImageName   = 'local/' + ['bash', '-c', 'basename $(git config --get remote.origin.url) .git'].execute().text.trim()

task buildImage(type: Exec) {
    group       'Build'
    description 'Builds an OCI image from a Dockerfile.'
    dependsOn   bootJar
    commandLine ("sh", "-c", "docker build -f build/resources/main/Dockerfile.untrusted --build-arg jar=$jarPathForOCI"
            + " -t $ociImageName:$gitShortCommit . && docker tag $ociImageName:$gitShortCommit $ociImageName:dev")
    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        println standardOutput
        return standardOutput.toString()
    }
}

task buildTrustedImage(type: Exec) {
    group       'Build'
    description 'Builds a trusted OCI image from a trusted Dockerfile.'
    dependsOn   bootJar
    commandLine ("sh", "-c", "docker image build -f build/resources/main/Dockerfile --build-arg jar=$jarPathForOCI"
            + " -t $ociImageName:$gitShortCommit-trusted --no-cache . && docker tag $ociImageName:$gitShortCommit-trusted $ociImageName:dev-trusted")
}

task templatePalaemon {
    String smsMrEnclave
    String smsFspfKey
    String smsFspfTag

    /*
    * Docker build will produce such logs: "RUN .. <MRENCLAVE>$MRENCLAVE</MRENCLAVE> ... <MRENCLAVE>abcdef</MRENCLAVE>"
    * We need to extract the 2nd occurence 'abcdef'
    */
    ext.extractValueBetweenTags = { s, tag ->
        String beginTag = "<" + tag + ">"
        String endTag = "</" + tag + ">"
        return s.substring(s.indexOf(beginTag, s.indexOf(beginTag) + 2) + beginTag.length(), s.indexOf(endTag, s.indexOf(endTag) + 2))
    }

    doFirst {
        String logs = buildImage.output()
        smsMrEnclave = extractValueBetweenTags(logs, "MRENCLAVE")
        smsFspfKey = extractValueBetweenTags(logs, "FSPF_KEY")
        smsFspfTag = extractValueBetweenTags(logs, "FSPF_TAG")
    }

    doLast{
        copy {
            // delete old one
            delete 'src/main/resources/boot/sms-palaemon-conf.yml'
            // use and copy template to the new location
            from 'src/main/resources/sms-palaemon-conf.yml.template'
            into 'src/main/resources/boot/'

            rename { String fileName ->
                fileName.replace('.template', '')
            }
            // replace tokens in the template file
            filter(ReplaceTokens, tokens: [
                    IEXEC_SMS_PALAEMON_SERVICE_NAME: "${rootProject.name}".toString(),
                    IEXEC_SMS_MRENCLAVE: smsMrEnclave,
                    IEXEC_SMS_FSPF_KEY: smsFspfKey,
                    IEXEC_SMS_FSPF_TAG: smsFspfTag,
            ])

        }
    }
}
//templatePalaemon.dependsOn buildImage
//buildImage.finalizedBy templatePalaemon
